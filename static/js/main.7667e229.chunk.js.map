{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","text","markdownText","bodyStyle","display","flexDirection","alignItems","justifyContent","width","margin","editorSectionStyle","maxWidth","previewSectionStyle","previewStyle","borderStyle","borderWidth","padding","background","headingStyle","paddingLeft","Previewer","props","state","markdown","this","setState","console","log","forceUpdate","document","body","style","id","rows","cols","value","onChange","e","updateMarkdown","target","dangerouslySetInnerHTML","__html","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAGIA,G,MAASC,EAAQ,KAEfC,EAAI,0uCA8CNC,EAAeH,EAAOE,GAEpBE,EAAY,CAChBC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,IAGJC,EAAqB,CACzBN,QAAS,OACTC,cAAe,SACfC,WAAY,UACZC,eAAgB,SAChBC,MAAO,IACPG,SAAU,MACVF,OAAQ,IAGJG,EAAsB,CAC1BR,QAAS,OACTC,cAAe,SACfC,WAAY,UACZC,eAAgB,SAChBC,MAAO,IACPG,SAAU,MACVF,OAAQ,IAGJI,EAAe,CACnBC,YAAa,QACbC,YAAa,EACbC,QAAS,GACTC,WAAY,kBAGRC,EAAe,CACnBJ,YAAa,QACbC,YAAa,EACbN,OAAQ,EACRQ,WAAY,iBACZE,YAAa,IAGTC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,SAAUtB,GAFP,E,2DAIJsB,GACbC,KAAKC,SAAS,CAACF,aACfrB,EAAeH,EAAOwB,GACtBG,QAAQC,IAAIzB,GACZsB,KAAKI,gB,+BAEG,IAAD,OAEP,OADAC,SAASC,KAAKC,MAAMd,WAAa,YAE/B,yBAAKc,MAAO5B,GACV,6BAAS4B,MAAOrB,GACd,wBAAIqB,MAAOb,GAAX,UACA,8BACEc,GAAG,SACHC,KAAK,KACLC,KAAK,KACLH,MAAO,CAACd,WAAY,kBACpBkB,MAAOX,KAAKF,MAAMC,SAClBa,SAAY,SAAAC,GAAM,EAAKC,eAAeD,EAAEE,OAAOJ,WAGnD,6BAASJ,MAAOnB,GACd,wBAAImB,MAAOb,GAAX,aACA,yBAAKc,GAAG,UAAUD,MAAOlB,EAAc2B,wBAAyB,CAACC,OAAQvC,W,GA5B3DwC,IAAMC,WAyCfC,MANf,WACE,OACE,kBAAC,EAAD,OC1HgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.7667e229.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet marked = require(\"marked\");\n\nconst text = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/200px-React-icon.svg.png)`;\n\nvar markdownText = marked(text);\n\nconst bodyStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  margin: 20\n}\n\nconst editorSectionStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  justifyContent: \"center\",\n  width: 500,\n  maxWidth: \"90%\",\n  margin: 20\n}\n\nconst previewSectionStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  justifyContent: \"center\",\n  width: 800,\n  maxWidth: \"90%\",\n  margin: 20\n}\n\nconst previewStyle = {\n  borderStyle: \"solid\",\n  borderWidth: 1,\n  padding: 20,\n  background: \"lightsteelblue\"\n}\n\nconst headingStyle = {\n  borderStyle: \"solid\",\n  borderWidth: 1,\n  margin: 0,\n  background: \"lightslategray\",\n  paddingLeft: 20\n}\n\nclass Previewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {markdown: text};\n  }\n  updateMarkdown(markdown) {\n    this.setState({markdown});\n    markdownText = marked(markdown);\n    console.log(markdownText);\n    this.forceUpdate();\n  }\n  render() {\n    document.body.style.background = \"steelblue\";\n    return (\n      <div style={bodyStyle}>\n        <section style={editorSectionStyle}>\n          <h3 style={headingStyle}>Editor</h3>\n          <textarea\n            id=\"editor\"\n            rows=\"15\"\n            cols=\"75\"\n            style={{background: \"lightsteelblue\"}}\n            value={this.state.markdown}\n            onChange = {e => {this.updateMarkdown(e.target.value);}}\n          ></textarea>\n        </section>\n        <section style={previewSectionStyle}>\n          <h3 style={headingStyle}>Previewer</h3>\n          <div id=\"preview\" style={previewStyle} dangerouslySetInnerHTML={{__html: markdownText}}></div>\n        </section>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <Previewer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}